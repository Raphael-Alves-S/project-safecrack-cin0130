// Copyright (C) 2022  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/12/2025 19:55:40"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          safecrack_fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module safecrack_fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg KEY0_n;
reg KEY1_n;
reg KEY2_n;
reg [3:0] SW;
reg clk;
// wires                                               
wire [8:0] LEDG;
wire [17:0] LEDR;

// assign statements (if any)                          
safecrack_fsm i1 (
// port map - connection between master ports and signals/registers   
	.KEY0_n(KEY0_n),
	.KEY1_n(KEY1_n),
	.KEY2_n(KEY2_n),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.SW(SW),
	.clk(clk)
);
initial 
begin 
#1000000 $finish;
end 

// KEY0_n
initial
begin
	KEY0_n = 1'b1;
	KEY0_n = #10000 1'b0;
	KEY0_n = #20000 1'b1;
end 

// KEY1_n
initial
begin
	KEY1_n = 1'b1;
	KEY1_n = #40000 1'b0;
	KEY1_n = #20000 1'b1;
end 

// KEY2_n
initial
begin
	KEY2_n = 1'b1;
	KEY2_n = #70000 1'b0;
	KEY2_n = #20000 1'b1;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
endmodule

